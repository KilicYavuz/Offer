// <auto-generated />
using System;
using Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(OfferContext))]
    partial class OfferContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameSurname")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("UserOid")
                        .HasColumnName("UserOId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.HasKey("Oid");

                    b.HasIndex("UserOid");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Entities.Models.Brands", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Entities.Models.Carts", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerOid")
                        .HasColumnName("CustomerOId")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductOid")
                        .HasColumnName("ProductOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOid")
                        .HasColumnName("SupplierOId")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Entities.Models.Categories", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentOid")
                        .HasColumnName("ParentOId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("ParentOid");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Models.ErrorLogs", b =>
                {
                    b.Property<Guid>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorContext")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorSource")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ErrorType")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Oid")
                        .HasName("PK_dbo.ErrorLogs");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Entities.Models.Notifications", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("UserOid")
                        .HasColumnName("UserOId")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.Models.OrderProducts", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderOid")
                        .HasColumnName("OrderOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductOid")
                        .HasColumnName("ProductOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOid")
                        .HasColumnName("SupplierOId")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("OrderOid");

                    b.HasIndex("ProductOid");

                    b.HasIndex("SupplierOid");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Entities.Models.Orders", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BillingAddresOid")
                        .HasColumnName("BillingAddresOId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerOid")
                        .HasColumnName("CustomerOId")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentState")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressOid")
                        .HasColumnName("ShippingAddressOId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Oid")
                        .HasName("PK_Orders_1");

                    b.HasIndex("CustomerOid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.ProductTags", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ProductOid")
                        .HasColumnName("ProductOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagOid")
                        .HasColumnName("TagOId")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("ProductOid");

                    b.HasIndex("TagOid");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("Entities.Models.Products", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrandOid")
                        .HasColumnName("BrandOId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryOid")
                        .HasColumnName("CategoryOId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Oid")
                        .HasName("PK_Products_1");

                    b.HasIndex("BrandOid");

                    b.HasIndex("CategoryOid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities.Models.RequestOfferProducts", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("OfferedPrice")
                        .HasColumnType("float");

                    b.Property<int?>("OfferedQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestOfferOid")
                        .HasColumnName("RequestOfferOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestProductOid")
                        .HasColumnName("RequestProductOId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex("RequestOfferOid");

                    b.HasIndex("RequestProductOid");

                    b.ToTable("RequestOfferProducts");
                });

            modelBuilder.Entity("Entities.Models.RequestOffers", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsPartialOffer")
                        .HasColumnType("bit");

                    b.Property<Guid>("RequestOid")
                        .HasColumnName("RequestOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierDisplayId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOid")
                        .HasColumnName("SupplierOId")
                        .HasColumnType("int");

                    b.HasKey("Oid")
                        .HasName("PK_RequestOffers_1");

                    b.HasIndex("RequestOid");

                    b.HasIndex("SupplierOid");

                    b.ToTable("RequestOffers");
                });

            modelBuilder.Entity("Entities.Models.RequestProducts", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductOid")
                        .HasColumnName("ProductOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestOid")
                        .HasColumnName("RequestOId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Oid");

                    b.HasIndex("ProductOid");

                    b.HasIndex("RequestOid");

                    b.ToTable("RequestProducts");
                });

            modelBuilder.Entity("Entities.Models.Requests", b =>
                {
                    b.Property<Guid>("Oid")
                        .HasColumnName("OId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanPartial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerOid")
                        .HasColumnName("CustomerOId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierOid")
                        .HasColumnName("SupplierOId")
                        .HasColumnType("int");

                    b.HasKey("Oid")
                        .HasName("PK_Requests_1");

                    b.HasIndex("CustomerOid");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Entities.Models.SupplierProducts", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductOid")
                        .HasColumnName("ProductOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierOid")
                        .HasColumnName("SupplierOId")
                        .HasColumnType("int");

                    b.HasKey("Oid")
                        .HasName("PK_SalesList");

                    b.HasIndex("ProductOid");

                    b.HasIndex("SupplierOid");

                    b.ToTable("SupplierProducts");
                });

            modelBuilder.Entity("Entities.Models.Tags", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Entities.Models.Users", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Oid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.HasOne("Entities.Models.Users", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserOid")
                        .HasConstraintName("FK_Address_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Categories", b =>
                {
                    b.HasOne("Entities.Models.Categories", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentOid")
                        .HasConstraintName("FK_Categories_Categories");
                });

            modelBuilder.Entity("Entities.Models.OrderProducts", b =>
                {
                    b.HasOne("Entities.Models.Orders", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderOid")
                        .HasConstraintName("FK_OrderProducts_Orders")
                        .IsRequired();

                    b.HasOne("Entities.Models.Products", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductOid")
                        .HasConstraintName("FK_OrderProducts_Products")
                        .IsRequired();

                    b.HasOne("Entities.Models.Users", "Supplier")
                        .WithMany("OrderProducts")
                        .HasForeignKey("SupplierOid")
                        .HasConstraintName("FK_OrderProducts_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Orders", b =>
                {
                    b.HasOne("Entities.Models.Users", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerOid")
                        .HasConstraintName("FK_Orders_Users1")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ProductTags", b =>
                {
                    b.HasOne("Entities.Models.Products", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductOid")
                        .HasConstraintName("FK_ProductTags_Products")
                        .IsRequired();

                    b.HasOne("Entities.Models.Tags", "Tags")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagOid")
                        .HasConstraintName("FK_ProductTags_Tags")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Products", b =>
                {
                    b.HasOne("Entities.Models.Brands", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandOid")
                        .HasConstraintName("FK_Products_Brands")
                        .IsRequired();

                    b.HasOne("Entities.Models.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryOid")
                        .HasConstraintName("FK_Products_Categories")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.RequestOfferProducts", b =>
                {
                    b.HasOne("Entities.Models.RequestOffers", "RequestOfferO")
                        .WithMany("RequestOfferProducts")
                        .HasForeignKey("RequestOfferOid")
                        .HasConstraintName("FK_RequestOfferProducts_RequestOffers")
                        .IsRequired();

                    b.HasOne("Entities.Models.RequestProducts", "RequestProductO")
                        .WithMany("RequestOfferProducts")
                        .HasForeignKey("RequestProductOid")
                        .HasConstraintName("FK_RequestOfferProducts_RequestProducts")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.RequestOffers", b =>
                {
                    b.HasOne("Entities.Models.Requests", "Request")
                        .WithMany("RequestOffers")
                        .HasForeignKey("RequestOid")
                        .HasConstraintName("FK_RequestOffers_Requests")
                        .IsRequired();

                    b.HasOne("Entities.Models.Users", "Supplier")
                        .WithMany("RequestOffers")
                        .HasForeignKey("SupplierOid")
                        .HasConstraintName("FK_RequestOffers_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.RequestProducts", b =>
                {
                    b.HasOne("Entities.Models.Products", "Product")
                        .WithMany("RequestProducts")
                        .HasForeignKey("ProductOid")
                        .HasConstraintName("FK_RequestProducts_Products")
                        .IsRequired();

                    b.HasOne("Entities.Models.Requests", "Request")
                        .WithMany("RequestProducts")
                        .HasForeignKey("RequestOid")
                        .HasConstraintName("FK_RequestProducts_Requests")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Requests", b =>
                {
                    b.HasOne("Entities.Models.Users", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerOid")
                        .HasConstraintName("FK_Requests_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.SupplierProducts", b =>
                {
                    b.HasOne("Entities.Models.Products", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductOid")
                        .HasConstraintName("FK_SalesLists_Products")
                        .IsRequired();

                    b.HasOne("Entities.Models.Users", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierOid")
                        .HasConstraintName("FK_SalesLists_Users")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
