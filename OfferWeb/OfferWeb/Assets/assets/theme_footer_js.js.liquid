{%- capture productOptionStyle -%}
  [
  {%- for i in (1..5) -%}
  {%-assign op_swatch = 'op_swatch' | append: i -%}
  {%-assign op_style = 'option_style_' | append: i -%}
  {%-assign color_watched = 'is_use' | append: i -%}
  {%-assign op_attach = 'op' | append: i | append: '_attach'-%}
  {%-assign op_pre_select = 'op' | append: i | append: '_pre_select'-%}
  {'name': "{{settings[op_swatch]}}",'style': "{{settings[op_style]}}",'color_watched': {{settings[color_watched]}},'op_attach': {{settings[op_attach]}},'op_pre_select': {{settings[op_pre_select]}}}{%-unless forloop.last-%},{%-endunless-%}
  {%- endfor -%}
  ]
{%- endcapture -%}
{%- capture productGridOptionStyle -%}
  [
  {%- for i in (1..5) -%}
  {%-assign op_swatch = 'qs_op_swatch' | append: i -%}
  {%-assign op_style = 'qs_option_style_' | append: i -%}
  {%-assign color_watched = 'qs_is_use' | append: i -%}
  {'name': "{{settings[op_swatch]}}",'style': "{{settings[op_style]}}",'color_watched': {{settings[color_watched]}}, 'sw_style': {{settings.qs_swatch_style|json}}}{%-unless forloop.last-%},{%-endunless-%}
  {%- endfor -%}
  ]
{%- endcapture -%}
// {{'vendor.js'|asset_url|split: '?'|last}}
theme.library = {{'vendor.js'|asset_url|split: '?'|last}};
theme.crr_library = localStorage.getItem('library') || '[]';
theme.strings = {
  inStock: {{'products.product.in_stock' | t | json}},
  outOfStock: {{'products.product.out_of_stock' | t | json}},
  soldOut: {{'products.product.sold_out' | t | json}},
  addToCart: {{'products.product.add_to_cart' | t | json}},
  addedToCart: {{'products.product.added_to_cart' | t | json}},
  contact: {{'products.product.contact' | t | json}},
  remove: {{'cart.general.remove' | t | json}},
  empty: {{'cart.general.empty' | t | json}},
  cartItem: {{'cart.general.items_with_count_html' | t: count: 1 | json}},
  cartItems: {{'cart.general.items_with_count_html' | t: count: 2 | json}},
  titleTotal: {{'cart.general.subtotal' | t | json}},
  noimage: {{'noimage.gif' | asset_url | json}},
  infoButton: {{'products.product_loating.info' | t | json}},
  customButton: {{'products.product_loating.custom_button' | t | json}},
  cdday: {{'general.countdown.count_down_day' | t | json}},
  cdhrs: {{'general.countdown.count_down_hours' | t | json}},
  cdmin: {{'general.countdown.count_down_minute' | t | json}},
  cdsecs: {{'general.countdown.count_down_seconds' | t | json}},
  no_shopping: {{'shopify.checkout.shipping.no_rates_for_cart_or_destination_notice'|t|json}},
  nll_send: {{'general.newsletter_form.send'|t|json}},
  nll_error_mesenger: {{'general.newsletter_form.error_mesenger'|t|json}},
  nll_success_mesenger: {{'general.newsletter_form.success_mesenger_html'|t|json}},
  aspect_ratio: "{{ settings.aspect_ratio | default: settings.aspect_ratio_default }}",
  search_dropdown_pages: {{'general.search_dropdown.pages_group'|t|json}},
  search_dropdown_articles: {{'general.search_dropdown.articles_group'|t|json}},
  search_dropdown_no_results: {{'general.search_dropdown.no_results'|t|json}}
};
theme.productStrings = {
  sizeGuide: {{'products.product.size_chart' | t | json}},
  addToCart: {{'products.product.add_to_cart' | t | json}},
  preOrder: {{'products.product.pre_order' | t | json}},
  selectOption: {{'products.product.select_option' | t | json}},
  soldOut: {{'products.product.sold_out' | t | json}},
  inStock: {{'products.product.in_stock' | t | json}},
  outOfStock: {{'products.product.out_of_stock' | t | json}},
  unavailable: {{'products.product.unavailable' | t | json}},
  onlyLeft: '{{"products.product.only_left_short_text_html" | t: count: "1"}}',
  onSale: '{{"general.search_dropdown.sale_label" | t}}',
  {% assign stock_message = settings.stock_message | split:'{{stock_number}}' -%}
  stockMessage: {{stock_message|json}},
  label_select: {{'products.product.label_select' | t | json}},
  viewMoreVariants: {{'products.product.view_more_variants' | t | json}},
  addToWishlist: {{'products.wishlist.add_to_wishlist' | t | json}},
  viewWishlist: {{'products.wishlist.view_wishlist' | t | json}}
};
theme.function = {
  multiCurrency: {{settings.show_multiple_currencies|json}},
  autoCurrency: {{settings.use_auto_currencies|json}},
  searchAjax: {{settings.use_search_ajax|json}},
  searchByCollection: {{settings.use_search_by_collection|json}},
  searchAjaxTypes: "product{%-if settings.search_type_page-%},page{%-endif-%}{%-if settings.search_type_article-%},article{%-endif-%}",
  vrsgallery: {{settings.gallery|json}},
  quickshop: {{settings.use_quickshop|json}},
  quickview: {{settings.use_quickview|json}},
  fquickview: {{settings.use_fquickview|json}},
  use_am_popup: {{settings.use_am_popup|json}},
  use_thumb_hidden_on_mb: {{settings.use_thumb_hidden_on_mb}},
  productImgType: "{{settings.img_type_prd_single}}",
  productOptionStyle: {{productOptionStyle}},
  productGridOptionStyle: {{productGridOptionStyle}},
  photoZoom: {{settings.use_zoom}},
  nll_ajax: {{settings.use_mailchimp_ajax}},
  ajax_cart: {{settings.type_ajax_cart|json}},
  sticky_icon_cart: {{sticky_icon_cart|json}},
  cart_shipping_calculator: {%if settings.type_ajax_cart == 'drawer' and settings.shipping_calculator and settings.shipping_calculator_cart_drawer%}true{%else%}false{%endif%},
  textInListShipping: {{'products.delivery.text_in_list'|t|json}},
  textInListShippingMax: {{'products.delivery.text_in_list_max'|t|json}},
  product_delivery: {
    offSaturday: {{settings.delivery_off_saturday|json}},
    offSunday: {{settings.delivery_off_sunday|json}},
    offDays: {{settings.delivery_off_days|split: '|'|json}},
    fromDate: {{settings.delivery_from_date|json}},
    toDate: {{settings.delivery_to_date|json}} 
  },
  countdown_timezone: {{settings.use_countdown_timezone|default: 'false'}},
  timezone: '{{settings.timezone|default: 'UTC'}}'
};
theme.compare = {
  remove: {{'products.compare.remove' | t |json}}
};
theme.gadget = {
  cookies_infor: {{settings.popup_cookies}},
  newsletter_popup: {{settings.newsletter_popup}},
  shipTo: {{settings.use_shipping_info}}
};

theme.suggest = {
  enable: {{settings.enable_suggest_products}},
  collection_opj: {{settings.collection_suggest|json}},
  delay_time: {{settings.delay_time | plus: 0}},
  show_time: {{settings.show_time | plus: 0 | plus: 600}},
  use_fake_location: {{settings.use_fake_location}},
  arr_fake_location: {{settings.fake_location | replace: ' | ', '|' | replace: ' |', '|' | replace: '| ', '|' | split: '|' | json }}
};
theme.extensions = {
  ktToolsCss: '{{'ktTools.scss.css'|asset_url}}',
  ktToolsJs: '{{'ktTools.js'|asset_url}}',
  ktToolsSlideshowJs: '{{'ktTools.slideshow.js'|asset_url}}',
  adminThemeTool: '{{'adminThemeTool.scss.css'|asset_url}}',
  ktToolsSettingsPreset: '{{'settings_preset.js'|asset_url}}'
}

const firstLink = document.getElementsByTagName("link")[0];
const headDocument = document.head;
const bodyDocument = document.body;
var $ = $jqMolla;

if (theme.crr_library.length == 0) {
  localStorage.setItem('library','[]');
}

window._handleize = function(str){
  str = str.toLowerCase().replace(/'|"|\(|\)|\[|\]/g, "").replace(/\W+/g, "-")
  return str.replace(/^-+|-+$/g, "")
}
window._snakeCase = function(str){
  str = str.toLowerCase().replace(/'|"|\(|\)|\[|\]/g, "").replace(/\W+/g, "_")
  return str.replace(/^-+|-+$/g, "")
}

"undefined" == typeof KT && (KT = {});
KT.checkVersion = function(name_item){
  name_item = name_item.split('/')[name_item.split('/').length - 1];
  var version = false;
  if(!localStorage.getItem(name_item)){
    version = true; 
  }
  var libs_ver = JSON.parse(theme.crr_library);
  if (libs_ver.length && libs_ver.findIndex(function(obj){ return obj.name == name_item}) !== -1) { 
    var objIndex = libs_ver.findIndex(function(obj){ return obj.name == name_item});
    if (parseFloat(libs_ver[objIndex].ver) !== theme.library) {
      libs_ver[objIndex].ver = theme.library;
      localStorage.setItem('library',JSON.stringify(libs_ver));
      version = true;
    }
  } else if(libs_ver.findIndex(function(obj){ return obj.name == name_item}) === -1){
    version = true;
  }
  return version; 
}
KT.pushVersion = function(name_item){
  var libs_ver = JSON.parse(theme.crr_library);
  if (libs_ver.length && libs_ver.findIndex(function(obj){ return obj.name == name_item}) !== -1) { 
    var objIndex = libs_ver.findIndex(function(obj){ return obj.name == name_item});
    if (parseFloat(libs_ver[objIndex].ver) !== theme.library) {
      libs_ver[objIndex].ver = theme.library;
      localStorage.setItem('library',JSON.stringify(libs_ver));
    }
  }
  else {
    var obj = {
      name : name_item,
      ver : theme.library
    }
    libs_ver.push(obj);
    localStorage.setItem('library',JSON.stringify(libs_ver));
  }
  theme.crr_library = localStorage.getItem('library') || '[]';
}
KT.loadScript = function(id, callback) {
  let css_url = "";
  let js_url = "";
  let done = false;
  // var file_name_css = '';
  if($('#'+id).length){
    checkExists(id, js_url)
  }
  else {
    if(id == 'magnific-popup' && $('#magnific-popup-css').length <= 0){
      css_url = "{{'magnific-popup.min.css'|asset_url|split: '?' | first}}";
      js_url = "{{'jquery.magnific-popup.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'threesixty' && $('#threesixty-css').length <= 0){
      css_url = "{{'threesixty.min.css'|asset_url|split: '?' | first}}";
      js_url = "{{'threesixty.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'photo-swipe' && $('#photo-swipe-css').length <= 0){
      css_url = "{{'photoswipe-ui.min.css'|asset_url|split: '?' | first}}";
      js_url = "{{'photoswipe-ui.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'YTPlayer'){
      css_url = "{{'jquery.mb.YTPlayer.min.css'|asset_url|split: '?' | first}}";
      js_url = "{{'jquery.mb.YTPlayer.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'swiper'){
      js_url = "{{'swiper.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'pjax'){
      js_url = "{{'jquery.pjax.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'imagesloaded'){
      js_url = "{{'imagesloaded.pkgd.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'isotope'){
      js_url = "{{'isotope-plus.pkgd.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'instafeed'){
      js_url = "{{'instafeed.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'countdown'){
      js_url = "{{'jquery.countdown.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'countto'){
      js_url = "{{'jquery.countTo.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'moment'){
      js_url = "{{'moment.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'moment-zone'){
      js_url = "{{'moment-timezone-with-data.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'momentlocale'){
      if (shopLocale === 'en') {handleLoad(); return}
      js_url = "//cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/locale/"+shopLocale+".js";
    }
    else if(id == 'zoom'){
      js_url = "{{'jquery.zoom.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'parallax'){
      js_url = "{{'jquery.parallax_mousemove.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'tippy'){
      js_url = "{{'tippy-bundle.iife.min.js'|asset_url|split: '?' | first}}";
    }
    else if(id == 'color_sw'){
      css_url = "{{'swatch-color.css'|asset_url|split: '?' | first}}";
    }
    else if(id == 'animate'){
      css_url = "{{'animate.min.css'|asset_url|split: '?' | first}}";
    }
    else if(id == 'adminThemeCss'){
      css_url = "{{'adminThemeTool.scss.css'|asset_url|split: '?' | first}}";
    }
    else if(id == 'shopify-currency'){
      js_url = "//cdn.shopify.com/s/javascripts/currencies.js";
    }
    else if(id == 'shipping'){
      js_url = "{{'jquery.currency-shipping.min.js'|asset_url}}";
    }
    done = false;
    ajaxLoad(id, css_url, js_url);
  }
  function ajaxLoad(name, css_url, js_url){
    if(css_url !== ''){
      var scr_css = document.createElement('link');
      scr_css.type = 'text/css';
      scr_css.rel = "stylesheet";
      scr_css.id = name+'-css';
      scr_css.href = css_url;
      scr_css.onerror = function() {
        alert("Error loading css " + this.href);
      };
      headDocument.insertBefore(scr_css, firstLink);
    }
    if(js_url !== ''){
      var scr_js = document.createElement('script');
      scr_js.type = 'text/javascript';
      scr_js.async = true;
      scr_js.src = js_url;
      scr_js.id = name;
      scr_js.onload = checkExists(name, js_url);
      scr_js.onerror = function() {
        alert("Error loading js " + this.src);
      };
      bodyDocument.appendChild(scr_js);
    }
  }
  function checkExists(id, js_url){
    var callbackTimer = setInterval(function() {
      if (id == 'swiper' && typeof Swiper === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'owl-carousel' && typeof $.fn.owlCarousel === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'slick-slide' && typeof $.fn.slick === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'moment' && typeof moment === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'moment-zone' && typeof moment.tz === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }      
      if (id == 'magnific-popup' && typeof $.fn.magnificPopup === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'imagesloaded' && typeof $.fn.imagesLoaded === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'isotope' && typeof $.fn.isotope === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'YTPlayer' && typeof jQuery.fn.YTPlayer === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'parallax' && typeof $.fn.mouseMove === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'countdown' && typeof $.fn.countdown === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'countto' && typeof $.fn.countTo === 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'magnific-popup' && typeof $.fn.magnificPopup == 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'instafeed' && typeof Instafeed == 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'momentlocale' && moment.locale() == shopLocale){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if (id == 'zoom' && typeof $.fn.zoom == 'function'){
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if(id === 'pjax' && typeof $.fn.pjax == 'function') {
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if(id === 'photo-swipe' && typeof PhotoSwipe == 'function') {
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if(id === 'threesixty' && typeof $jq == 'function' && typeof $jq.fn.ThreeSixty == 'function') {
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if(id === 'tippy' && typeof tippy == 'function') {
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if(id === 'shipping' && typeof Kt_currency.convertAll == 'function') {
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
      if(id === 'shopify-currency' && typeof Currency !== undefined) {
        handleLoad()
        clearInterval(callbackTimer);
        return true;
      }
    }, 100);
  }
  function handleLoad() {
    if (!done) {
      done = true;
      // console.log(js_url)
      callback(js_url, "ok");
    }
  }
}